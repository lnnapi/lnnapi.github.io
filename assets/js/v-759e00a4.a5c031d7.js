(self.webpackChunklnnapi=self.webpackChunklnnapi||[]).push([[190],{3967:(e,a,c)=>{"use strict";c.r(a),c.d(a,{data:()=>t});const t={key:"v-759e00a4",path:"/http/sign.html",title:"Signature",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"http/sign.md",git:{updatedTime:1625035966e3,contributors:[{name:"Lawetis-Lee",email:"es6china@163.com",commits:2},{name:"397702186@qq.com",email:"397702186@qq.com",commits:1}]}}},477:(e,a,c)=>{"use strict";c.r(a),c.d(a,{default:()=>d});const t=(0,c(6252).uE)('<h1 id="signature" tabindex="-1"><a class="header-anchor" href="#signature" aria-hidden="true">#</a> Signature</h1><p>According to the standard rule, <code>POST</code> requests use <code>form</code> parameters，while <code>GET</code> using <code>query</code> parameter. Both types of parameter must be sorted by <code>ASCII</code> ascending order then signed with <code>Ed25519</code> algorithm to generate the signature.</p><p>For instance, let&#39;s see how to sign the request below:</p><p>Source request data</p><div class="language-text ext-text"><pre class="shiki" style="background-color:#FFFFFF;"><code><span class="line"><span style="color:#000000;">http://127.0.0.1/api/user/CreateUser?UserId=3e4c12bd3a5a49174c7441271\n\nform data:\nUnixTime=1582083351&amp;SecretId=5e4cabd3a5a49174c7421274\n</span></span></code></pre></div><p>The key pair</p><ul><li>Private Key: <code>7a51d876f017c69479ae64f90e9e9b25d9130d7659c5694072d790b8166e4ab5</code></li><li>Public Key: <code>bc9c5390c82c8e106086e9fa1d85b509821b9a27a83f7cb6d53872cd6020a601</code></li></ul><p>Sign the request step by step:</p><ol><li>Sort all parameters by <code>ASCII</code> ascending order</li></ol><div class="language-text ext-text"><pre class="shiki" style="background-color:#FFFFFF;"><code><span class="line"><span style="color:#000000;">SecretId=5e4cabd3a5a49174c7421274&amp;UnixTime=1582083351&amp;UserId=3e4c12bd3a5a49174c7441271\n</span></span></code></pre></div><ol start="2"><li>Sign the above string with <code>Ed25519</code> algorithm</li></ol><div class="language-text ext-text"><pre class="shiki" style="background-color:#FFFFFF;"><code><span class="line"><span style="color:#000000;">2c85d50cdfada748cc251632aec3d64c14e49006a662cdcc1e8709212654f102f7ec22f2ebfa7cd709fe8ac65806ee78407ffc5e1c035ca672b3fac4155dbf04\n</span></span></code></pre></div><ol start="3"><li>Append a new parameter named Sign, the final form parameters should be this:</li></ol><div class="language-text ext-text"><pre class="shiki" style="background-color:#FFFFFF;"><code><span class="line"><span style="color:#000000;">SecretId=5e4cabd3a5a49174c7421274&amp;UnixTime=1582083351&amp;Sign=d14f046ccd7048fed140d418393053e61caff53f839724153589daa365218f9929312db0eba3edb947fbbaff6697a427ce094dc2ac576b9d5583429bb5fe7606\n</span></span></code></pre></div><ul><li><code>HTTP</code> request must be signed on both URL <code>query</code> and <code>form</code> parameters</li><li><code>Sign</code> is not a parameter for signing, according to the <code>HTTP</code> rule，the generated <code>Sign</code> should be appended to <code>query</code> parameters tail in <code>GET</code> ，while to <code>form</code> parameters in <code>POST</code></li><li>All <code>WebSocket</code> parameters should be put in URL then be signed in the same way</li><li>All requests are <code>case sensitive</code>, please make sure they are the same as the document.</li></ul>',15),d={render:function(e,a){return t}}}}]);