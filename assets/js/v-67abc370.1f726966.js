(self.webpackChunklnnapi=self.webpackChunklnnapi||[]).push([[814],{4720:(t,e,a)=>{"use strict";a.r(e),a.d(e,{data:()=>d});const d={key:"v-67abc370",path:"/zh-cn/http/http.html",title:"接口基础信息",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"请求地址",slug:"请求地址",children:[]},{level:2,title:"频率限制",slug:"频率限制",children:[]},{level:2,title:"HTTP请求公共参数和返回值基本结构",slug:"http请求公共参数和返回值基本结构",children:[{level:3,title:"公共参数",slug:"公共参数",children:[]},{level:3,title:"HTTP请求返回值基本结构",slug:"http请求返回值基本结构",children:[]}]}],filePathRelative:"zh-cn/http/http.md",git:{updatedTime:1625035966e3,contributors:[{name:"Lawetis-Lee",email:"es6china@163.com",commits:2},{name:"397702186@qq.com",email:"397702186@qq.com",commits:1}]}}},6610:(t,e,a)=>{"use strict";a.r(e),a.d(e,{default:()=>n});const d=(0,a(6252).uE)('<h1 id="接口基础信息" tabindex="-1"><a class="header-anchor" href="#接口基础信息" aria-hidden="true">#</a> 接口基础信息</h1><h2 id="请求地址" tabindex="-1"><a class="header-anchor" href="#请求地址" aria-hidden="true">#</a> 请求地址</h2><ul><li><code>HTTP</code>请求地址：<code>https://api.lnncoin.io/v1/api/</code>，接口实际请求URL例如:<code>https://api.lnncoin.io/v1/api/SpotBalance/GetAllBalance</code></li><li><code>WebSocket</code>连接地址：<code>wss://ws.lnncoin.io</code></li></ul><h2 id="频率限制" tabindex="-1"><a class="header-anchor" href="#频率限制" aria-hidden="true">#</a> 频率限制</h2><ul><li>目前Lnncoin只对IP进行限频，频率为<code>100次/秒</code></li><li>后续将根据实际情况调整每个接口的访问频率</li><li>触发限频以后将返回<code>HTTP</code>状态码<code>419</code></li></ul><h2 id="http请求公共参数和返回值基本结构" tabindex="-1"><a class="header-anchor" href="#http请求公共参数和返回值基本结构" aria-hidden="true">#</a> HTTP请求公共参数和返回值基本结构</h2><h3 id="公共参数" tabindex="-1"><a class="header-anchor" href="#公共参数" aria-hidden="true">#</a> 公共参数</h3><table><thead><tr><th>参数名</th><th>参数类型</th><th>参数说明</th></tr></thead><tbody><tr><td>SecretId</td><td>String</td><td>密钥Id</td></tr><tr><td>UnixTime</td><td>Int64</td><td>时间戳精确到<strong>秒</strong></td></tr><tr><td>Sign</td><td>String</td><td>签名字符串</td></tr></tbody></table><ul><li>所有请求无额外<code>header</code>参数额</li><li><code>POST</code>请求需要设置<code>Content-Type:application/x-www-form-urlencoded</code></li></ul><h3 id="http请求返回值基本结构" tabindex="-1"><a class="header-anchor" href="#http请求返回值基本结构" aria-hidden="true">#</a> HTTP请求返回值基本结构</h3><p>所有应答均为<code>json</code>格式，基本结构如下:</p><div class="language-json ext-json"><pre class="shiki" style="background-color:#FFFFFF;"><code><span class="line"><span style="color:#000000;">{</span></span>\n<span class="line"><span style="color:#000000;">\t</span><span style="color:#0451A5;">&quot;Code&quot;</span><span style="color:#000000;">: </span><span style="color:#098658;">0</span><span style="color:#000000;">,</span></span>\n<span class="line"><span style="color:#000000;">\t</span><span style="color:#0451A5;">&quot;Message&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;Success&quot;</span><span style="color:#000000;">,</span></span>\n<span class="line"><span style="color:#000000;">\t</span><span style="color:#0451A5;">&quot;Data&quot;</span><span style="color:#000000;">: </span><span style="color:#CD3131;">具体接口响应数据</span></span>\n<span class="line"><span style="color:#000000;">}</span></span>\n<span class="line"></span></code></pre></div><p>在请求失败时，Data一般没有值</p><table><thead><tr><th>Code错误码</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>请求处理成功</td></tr><tr><td>2</td><td>内部错误</td></tr><tr><td>3</td><td>参数格式、数据类型不正确</td></tr><tr><td>4</td><td>用户数据逻辑错误</td></tr><tr><td>6</td><td>签名错误</td></tr><tr><td>9</td><td>内部处理超时</td></tr><tr><td>11</td><td>服务不可用</td></tr><tr><td>13</td><td>该接口请求过于频繁</td></tr></tbody></table>',14),n={render:function(t,e){return d}}}}]);